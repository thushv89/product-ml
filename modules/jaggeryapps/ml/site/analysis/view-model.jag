<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WSO2 Machine Learner</title>
    <link rel="icon" href="../../images/favicon.png" type="image/x-icon" />
    <link href="../../css/bootstrap.css" rel="stylesheet">
    <link href="../../css/custom.css" rel="stylesheet">
    <link href="../../css/jquery.dataTables.min.css" rel="stylesheet">
    <link href="../../css/custom-theme.css" rel="stylesheet">

    <link rel="stylesheet" type="text/css" href="../../css/d3.parsets.css">
    <link rel="stylesheet" type="text/css" href="../../css/data.css">
    <link rel="stylesheet" type="text/css" href="../../css/wso2.ml.graphs.css">
    <link rel="stylesheet" type="text/css" href="../../css/nv.d3.min.css">
    <!-- for threshold slider -->
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
  	
    <script src="../../js/respond.min.js"></script>  
    <script src="../../js/d3.v3.min.js"></script>
    <script src="../../js/d3.js"></script>
    <script src="../../js/nv.d3.js"></script>
    <script src="../../js/wso2.ml.graphs.js"></script>
    
    <script src="../../js/jquery-1.11.1.min.js"></script>

    <%
        include("../../includes/tenantAware.jag");
    %> 

</head>

<body>

<div class="container col-lg-12 col-md-12 col-sm-12">

<!-- header -->
<header>
    <div class="row wr-global-header">
        <div class="col-sm-8 app-logo">
            <a href="../home/home.jag"><img src="../../images/logo.png" /><h2 class="app-title">Machine Learner</h2></a>
        </div>
    	<div class="col-sm-4">
    		<div class="wr-auth pull-right">
    			<a href="#" data-toggle="dropdown" class="cu-ico-right-button cu-ico-button-user"><% print(session.get("logged.user")); %></a>
    			<div class="dropdown-menu">
    				<div class="cu-arrow"></div>
    				<div class="dropdown-menu-content">
    					<a href="../logout/logout.jag" id="log-out" class="filter-item">Logout</a>
    				</div>
    			</div>			
    		</div>
    	</div>
    </div>
</header>
<!-- /header -->

<!-- secondary header - app bar -->
<div id="nav" class="row wr-app-bar">
	<div class="col-md-9 wr-action-container">
		<div class="wr-asset-type-switcher">
	        <a href="#" class="ctrl-asset-type-switcher" data-placement="bottom" data-trigger="focus">
	        <span class="btn-asset"></span>
	        </a>
        </div>
        <div class="wr-project">
            <span class="title">PROJECTS \ </span><span id="nav-project"></span><span id="nav-analysis"></span><span id="nav-model"></span>
        </div>

		<div class="wr-action-btn-bar">
			<a href="../project/projects.jag" class="cu-btn btn-prev" id="back-link">Back</a>
		</div>
	</div>

	<div class="col-md-3">
		<div class="wr-secondary-links pull-right">
			<!-- <a href="#" class="cu-btn btn-prev" id="prev-btn">Previous</a> -->
			<!-- <a href="#" id="next-btn" class="cu-btn-reverse btn-next">Next</a> -->
		</div>
	</div>
</div>
<!-- secondary header - app bar -->


<!-- content/body -->
<div class="row">
	<div class="col-lg-12 wr-secondary-bar"></div>
</div>
<div class="row">
	<div class="col-md-12">
		

		<!-- content -->
		<div class="container col-md-12 col-centered wr-content">

            <div id="notification-area"></div>
			<h1 id="model-summary-title" class="title">Model Summary</h1>

            <div class="col-md-12 wr-graph-content">
            
                <div class="wr-graph-element gr03">
                    <h5>ROC Graph</h5>
                    <div class="wr-graph-img">
                        <div id="roc-graph"></div>
                    </div>
                </div>

                <div class="wr-graph-element gr03">
                    <h5>Feature Importance</h5>
                    <div class="wr-graph-img">
                        <div id="weights-chart">
                            <svg></svg>
                        </div>
                    </div>
                </div>  
                
                <div class="wr-graph-element gr03">
                    <h5>Confusion Matrix</h5>
                    <div class="wr-graph-img">
                        <div id="confusion-matrix"></div>
                        <br>                
                        <label class="input-label" for="amount">Threshold:</label>
                        <input type="text" class="threshold-value" id="amount" readonly>                
                        <div id="slider"></div>
                        <br>
                    </div>
                </div>

                <div class="wr-graph-element gr03">
                    <h5 id="predicted-actual-residual-title"></h5>
                    <div class="wr-graph-img">
                        <div id="predicted-vs-actual">
                            <div id="predicted-vs-actual-chart"></div>
                            <br>
                            <div class="filter-md">
                                <label class="input-label-sm">X-Axis<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
                                <div class="input-control text">
                                    <select class="form-control" id="predicted-actual-x-features"></select>
                                </div>
                            </div>
                            <div class="filter-md">
                                <label class="input-label-sm">Y-Axis<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
                                <div class="input-control text">
                                    <select class="form-control" id="predicted-actual-y-features"></select>
                                </div>
                            </div>                    
                        </div>

                        <div id="residual">
                            <div id="residual-plot"></div>
                            <br>
                            <div class="filter-md">
                                <label class="input-label-sm">Feature<span class="help-tip glyphicon glyphicon-question-sign"></span></label>
                                <div class="input-control text">
                                    <select class="form-control" id="residual-features"></select>
                                </div>
                            </div>
                        </div>                
                    </div>
                </div>                          
            
            </div>
		</div>
		<!-- /content -->


	</div>
</div>
<!-- /content/body -->

</div>   


<!--footer class="footer">
        <p>&copy; 2014 WSO2 Inc. All Rights Reserved</p>
</footer-->

<div id="content-asset-types" style="display: none">
    <div>
        <a class="ast-type-item" href="../project/projects.jag"><img src="../../images/icons/ico-projects.png" /><span>Projects</span></a>
        <a class="ast-type-item" href="../data/datasets.jag"><img src="../../images/icons/ico-datasets.png" /><span>Datasets</span></a>   
    </div>
</div>

<script src="../../js/d3.v3.min.js" charset="utf-8"></script>
<script src="../../js/wso2.ml.util.js"></script>
<script src="../../js/bootstrap.min.js"></script>
<script src="../../js/jquery.dataTables.js"></script>
    
<script src="../../js/d3.parsets.js"></script>
<script src="../../js/figue.js"></script>

<!-- for threshold slider -->
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

<script type="text/javascript">

var serverUrl = window.location.origin;
var datasetId = getParameterByName('datasetId');
var projectId = getParameterByName('projectId');
var projectName = getParameterByName('projectName');
var analysisName = getParameterByName('analysisName');
var analysisId = getParameterByName('analysisId');
var modelName = getParameterByName('modelName');
var modelId = getParameterByName('modelId');
var fromCompare = getParameterByName('fromCompare');
var predictedVsActuals;
var numericalFeatureNames;
var responseVariable;

var testResultDataPointsSample;
var features;
// redraw charts upon changes in selections
$(document).on('change','select[id="predicted-actual-x-features"], select[id="predicted-actual-y-features"]',function() {
    drawPredictedVsActualChart(testResultDataPointsSample);
});
$(document).on('change','select[id="residual-features"]',function() {
    drawResidualPlot(testResultDataPointsSample);
});

/*for threshold slider*/
$(function() {
    $("#slider").slider({
        value: 0.5,
        min: 0,
        max: 1,
        step: 0.1,
        slide: function(event, ui) {
            $("#amount").val(ui.value);
            // redraw table on slider change
            drawConfusionMatrix(predictedVsActuals, ui.value, "#confusion-matrix");
        }
    });
    $("#amount").val($("#slider").slider("value"));
});

$( document ).ready(function() {

	$('#nav').affix({
	      offset: {
	        top: $('header').height()
	      }
	});

    $("[data-toggle=popover]").popover();

    $(".ctrl-asset-type-switcher").popover({
        html : true, 
        content: function() {
            return $('#content-asset-types').html();
        }
    });

    // get numerical feature names
    $.ajax({
        type: "GET",
        url: serverUrl + "/api/analyses/" + analysisId + "/filteredFeatures?featureType=NUMERICAL",
        async: false,
        success : function(res){
        	numericalFeatureNames = res;
        },
        error : function(res){
                var errorText = res.responseText
            handleNotification(errorText, '#notification-area', 'warning');
        }
    });

    // get response variable
    $.ajax({
        type: "GET",
        url: serverUrl + "/api/analyses/" + analysisId + "/responseVariables",
        async: false,
        dataType: "text",
        success : function(res){
        	responseVariable = res;
        },
        error : function(res){
                var errorText = res.responseText
            handleNotification(errorText, '#notification-area', 'warning');
        }
    });

    // put path in application navigator
    $('#nav-project').text(projectName);
    $('#nav-analysis').text(" \\ "+analysisName);
    $('#nav-model').text(" \\ "+modelName);

    // get model summary and draw plots    
    $.ajax({
        type: 'GET',
        url: serverUrl + "/api/models/" + modelId + "/summary",
        async : false,
        success: function(res){

            var algorithm = sanitize(res.algorithm);

            if (algorithm == 'LOGISTIC_REGRESSION' || algorithm == 'LOGISTIC_REGRESSION_LBFGS' || algorithm == 'SVM') {
                if(res.modelAccuracy) {
                    $("#model-summary-title").append(" [Accuracy: " + res.modelAccuracy.toFixed(4)*100 + "%]");    
                }                
                $("#residual").remove();
                // format data and draw ROC graph
                var rocData  = JSON.parse(res.roc);
                var auc  = parseFloat(res.auc).toFixed(3);
                drawRocGraph(rocData, auc, "#roc-graph");
                // create data object and draw weights chart
                var featureImportanceData = [ {'key':'featureImportanceData', 'values': res.featureImportance}];
                drawWeightsChart(featureImportanceData);
                // draw confusion matrix	            
                predictedVsActuals = res.predictedVsActuals;
        		var threshold = $("#slider").slider("value");
        		drawConfusionMatrix(predictedVsActuals, threshold, "#confusion-matrix");
                // draw feature select
                testResultDataPointsSample = res.testResultDataPointsSample;
                features = res.features;
                // draw predicted vs. actual chart if at least one numerical feature exists (except response variable)
                if(features.length > 0) {
	                $('#predicted-actual-x-features, #predicted-actual-y-features').empty();
	                $.each(features,function(index, feature){
	                    $('#predicted-actual-x-features, #predicted-actual-y-features').append($('<option>', { 
	                        value: index,
	                        text : sanitize(feature)
	                    }));
	                });                    
                    $('#predicted-actual-y-features option')[1].selected = true;
	                // draw predicted vs. actual chart
	                drawPredictedVsActualChart(testResultDataPointsSample);
                }
                else {
                	var chartType = 'predicted vs. actual chart';
					$('#predicted-vs-actual').html(getInfo(chartType));
                }
            }
            else if (algorithm == 'DECISION_TREE' || algorithm == 'NAIVE_BAYES') {
                if(res.modelAccuracy) {
                    $("#model-summary-title").append(" [Accuracy: " + res.modelAccuracy.toFixed(4)*100 + "%]");    
                }                
                // remove not applicable charts/tables
                $("#roc-graph, #weights-chart, #confusion-matrix").closest("div.wr-graph-element").remove();
                $("#residual").remove();
                // draw feature select
                testResultDataPointsSample = res.testResultDataPointsSample;
                features = res.features;
                // draw predicted vs. actual chart if at least one numerical feature exists (except response variable)
                if(features.length > 0) {
                    $('#predicted-actual-x-features, #predicted-actual-y-features').empty();
                    $.each(features,function(index, feature){
                        $('#predicted-actual-x-features, #predicted-actual-y-features').append($('<option>', { 
                            value: index,
                            text : sanitize(feature)
                        }));
                    });                    
                    $('#predicted-actual-y-features option')[1].selected = true;
	                // draw predicted vs. actual chart
	                drawPredictedVsActualChart(testResultDataPointsSample);
                }
                else {
                    var chartType = 'predicted vs. actual chart';
                    $('#predicted-vs-actual').html(getInfo(chartType));
                }                    
            }            
            else if (algorithm == 'LINEAR_REGRESSION' || algorithm == 'RIDGE_REGRESSION' || algorithm == 'LASSO_REGRESSION') {                
                if($.isNumeric(res.error)) {
                    $("#model-summary-title").append(" [MSE: " + res.error.toExponential(2) + "]");
                }                
                // remove not applicable charts/tables
                $("#roc-graph, #confusion-matrix").closest("div.wr-graph-element").remove();
                $("#predicted-vs-actual").remove();
                // create data object and draw weights chart
                var featureImportanceData = [ {'key':'featureImportanceData', 'values': res.featureImportance}];
                drawWeightsChart(featureImportanceData);
                // draw feature select
                testResultDataPointsSample = res.testResultDataPointsSample;
                features = res.features;
                var displayFeatures = getDisplayFeatures(features, numericalFeatureNames);
                // draw residual plot if at least one numerical feature exists (except response variable)
                if(displayFeatures.length > 0) {
                    $('#residual-features').empty();
                    $.each(displayFeatures,function(index, feature){
                        $('#residual-features').append($('<option>', { 
                            value: sanitize(feature.value),
                            text : sanitize(feature.text)
                        }));
                    });                    
                    // draw residual plot
                    drawResidualPlot(testResultDataPointsSample);                   
                }
                else {
                    var chartType = 'residual plot';
                    $('#residual').html(getInfo(chartType));
                }                    
            }
            else if (algorithm == 'K_MEANS') {
                // TODO: add cluster diagram
                $("#roc-graph, #weights-chart, #confusion-matrix, #predicted-vs-actual-chart").closest("div.col-md-6").remove();
                console.log("K-means");
            }
        },
        error: function(res){
            var errorText = res.responseText
            handleNotification(errorText, '#notification-area', 'warning');
        }
    });

    $('#back-link').on('click', function(e){
        e.preventDefault();

        if(fromCompare == 'true') {
            window.location.href = '../project/compare.jag?projectId=' + projectId + '&projectName=' + projectName + '&dataseId=' + datasetId;
        } else {
            window.location.href = 'analysis.jag?analysisId=' + analysisId + '&datasetId=' + datasetId + '&projectName=' + projectName + '&analysisName=' + analysisName;
        }
    });   
	
});

// function to draw ROC graph
function drawRocGraph (data, auc, cssClass) {
    var rocGraph = new ROCGraph(data);
    rocGraph.setXAxisText("False positive rate");
    rocGraph.setYAxisText("True positive rate");
    rocGraph.setLegendName("ROC curve (AUC = "+auc+")");
    rocGraph.setLineWidth(2);
    rocGraph.setPlotingAreaWidth(600);
    rocGraph.setPlotingAreaHeight(380);
    rocGraph.setLineColor("#f16c20"); 
    rocGraph.plot(d3.select(cssClass),function(){
	   	var xLoc = xScale.invert(d3.mouse(this)[0]);
        var yLoc = yScale.invert(d3.mouse(this)[1]);
    });
};

// function to draw weights chart
function drawWeightsChart (data) {

    nv.addGraph(function() {
        var chart = nv.models.discreteBarChart()
                        .x(function(d) { return shortenLabel(d.label) })
                        .y(function(d) { return d.value })
                        .staggerLabels(false)
                        .tooltips(false)
                        .showValues(false)
                        .color(["#1395ba", "#117899", "#0f5b78", "#0d3c55", "#c02e1d", "#d94e1f", "#f16c20", "#ef8b2c", "#ecaa38", "#ebc844", "a2b86c", "5ca793"]);

        chart.yAxis.tickFormat(d3.format(".2e")).showMaxMin(false);

        chart.xAxis.axisLabel('Features')

        d3.select('#weights-chart svg')
            .datum(data)
            .call(chart);

        nv.utils.windowResize(chart.update);
        return chart;
    });
}

// function to draw predicted vs. actual chart
function drawPredictedVsActualChart(testResultDataPointsSample) {

    var xAxisFeatureIndex = $("#predicted-actual-x-features").val();
    var yAxisFeatureIndex = $("#predicted-actual-y-features").val();
    var xAxisFeatureName = $("#predicted-actual-x-features option:selected").text();
    var yAxisFeatureName = $("#predicted-actual-y-features option:selected").text();
    $('#predicted-actual-residual-title').html('Predicted vs. Actual');

    var predictedVsActual = [];
    for (var i = 0; i < testResultDataPointsSample.length; i++) {                
        
        var predictedVsActualPoint = [];
        predictedVsActualPoint[0] = parseFloat(testResultDataPointsSample[i]['featureValues'][xAxisFeatureIndex.toString()]);
        predictedVsActualPoint[1] = parseFloat(testResultDataPointsSample[i]['featureValues'][yAxisFeatureIndex.toString()]);

        var actual = testResultDataPointsSample[i].predictedVsActual.actual;
        var predicted = testResultDataPointsSample[i].predictedVsActual.predicted;
        var labeledPredicted = labelPredicted(predicted, 0.5);

        if(actual == labeledPredicted) {
            predictedVsActualPoint[2] = 'Correct';
        }
        else {
            predictedVsActualPoint[2] = 'Incorrect';
        }
        predictedVsActual.push(predictedVsActualPoint);
    }
    drawScatterPlot(predictedVsActual, '#predicted-vs-actual-chart', xAxisFeatureName, yAxisFeatureName, ["#286c4f", "#c02e1d"]);
}

// function to draw residual plot
function drawResidualPlot(testResultDataPointsSample) {

    var featureIndex = $("#residual-features").val();
    var featureName = $("#residual-features option:selected").text();
    $('#predicted-actual-residual-title').html('Residual Plot');

    var residualData = [];
    for (var i = 0; i < testResultDataPointsSample.length; i++) {                
        
        var residualRow = [];
        residualRow[0] = parseFloat(testResultDataPointsSample[i]['featureValues'][featureIndex.toString()]);
        residualRow[1] = parseFloat(testResultDataPointsSample[i].predictedVsActual.actual - testResultDataPointsSample[i].predictedVsActual.predicted);
        residualRow[2] = 'Residual';
        residualData.push(residualRow);
    }

    drawScatterPlot(residualData, '#residual-plot', featureName, 'Residual', ["#c02e1d"]);
}

// drawing a simple scatter graph
function drawScatterPlot(data, cssClass, xLabel, yLabel, colors) {
    $(cssClass).empty();
    var scatter = new ScatterPlot(data);

    scatter.setPlotingAreaWidth(600);
    scatter.setPlotingAreaHeight(400);
    scatter.setMarkerSize(2);
    scatter.setColors(colors);
    scatter.setXAxisText(xLabel);
    scatter.setYAxisText(yLabel);
    scatter.plot(d3.select(cssClass));
};

// function that returns JSON containing feature names (numerical except reponse variable)
// with mapped index of summary object feature names
function getDisplayFeatures(features, numericalFeatureNames) {
    // remove response variable from numerical feature names if response variable is within numerical features
    var responseVariableIndex = $.inArray(responseVariable, numericalFeatureNames);
    if(responseVariableIndex > -1) {
        numericalFeatureNames.splice(responseVariableIndex, 1); 
    }    
    // get corresponding index of summary object feature names for each feature name 
    var featureIndices = numericalFeatureNames.map(function(elem){
        var index = features.indexOf(elem);
        return index;
    });
    // create object array with feature name and mapped index
    var displayFeatures = [];
    for(var i = 0; i < featureIndices.length; i++) {
        var displayFeature = {'value': featureIndices[i], 'text': numericalFeatureNames[i]};
        displayFeatures.push(displayFeature);                    
    }
    return displayFeatures;
}

function getInfo(chartType) {
    var minNumFeaturesInfoText = 'Minimum of one numerical feature required for '+chartType+'.';
    var minNumFeaturesInfo = buildNotification(minNumFeaturesInfoText, 'info');
    return minNumFeaturesInfo;
}

// function to shorten the label
function shortenLabel (label) {
    if(label.length > 4) {
        return label.substring(0, 4)+'.';        
    }
    else {
        return label;                       
    }
}

// function to draw confusion matrix
function drawConfusionMatrix (predictedVsActuals, threshold, cssSelector) {

	var confusionMatrixValues = calculateConfusionMatrix (predictedVsActuals, threshold);
	var confusionMatrixHtml = 	"<table border='1'>" +
									"<tr>" +
										"<td colspan='2' rowspan='2' class='header-level-1'>Total</td>" +
										"<td colspan='2' class='header-level-1'>Predicted</td>" +
									"</tr>" +
									"<tr>" +
										"<td class='header-level-2'>Positive</td>" +
										"<td class='header-level-2'>Negative</td>" +
									"</tr>" +
									"<tr>" +
										"<td rowspan='2' class='header-level-1'>Actual</td>" +
										"<td class='header-level-2'>Positive</td>" +
										"<td>" + confusionMatrixValues[0] + "</td>" +
										"<td>" + confusionMatrixValues[1] + "</td>" +
									"</tr>"+
									"<tr>"+
									"<td class='header-level-2'>Negative</td>" +
										"<td>" + confusionMatrixValues[3] + "</td>" +
										"<td>" + confusionMatrixValues[2] + "</td>" +
									"</tr>"+
									"<tr>"+
										"<td colspan='3' class='header-level-1'>Accuracy</td>" +
										"<td>" + confusionMatrixValues[4].toFixed(2) + "%</td>" +
									"</tr>" +
								"</table>";

	$(cssSelector).html(confusionMatrixHtml);	
}

// function to calculate confusion matrix
function calculateConfusionMatrix(predictedVsActuals, threshold) {
	var truePositives = 0;
	var falsePositives = 0;
	var trueNegatives = 0;
	var falseNegatives = 0;
	var accuracy = 0;

	for (var i = 0; i < predictedVsActuals.length; i++) {

		var actual = predictedVsActuals[i]['actual'];
		var predicted = labelPredicted(predictedVsActuals[i]['predicted'], threshold);

		if (predicted == 1 && actual == 1) {
			truePositives++;
		}
		else if (predicted == 0 && actual == 1) {
			falsePositives++;
		}
		else if (predicted == 0 && actual == 0) {
			trueNegatives++;
		}		
		else { // predicted == 1 && actual == 0
			falseNegatives++;
		}
	}

	var total = truePositives+falsePositives+trueNegatives+falseNegatives;
	accuracy = (truePositives+trueNegatives)/total*100;

	var confusionMatrixValues = [];
	confusionMatrixValues[0] = truePositives;
	confusionMatrixValues[1] = falsePositives;
	confusionMatrixValues[2] = trueNegatives;
	confusionMatrixValues[3] = falseNegatives;
	confusionMatrixValues[4] = accuracy;

	return confusionMatrixValues;	
}

// function to get the binary value of a predicted value for given threshold
function labelPredicted(actualValue, threshold) {
	var actual = 0;
	if (actualValue >= threshold) {
		actual = 1;
	}
	return actual;
}

</script>

</body>
</html>
